#include <Ewma.h>
#include <MS5611.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_MMC56x3.h>
#include <Adafruit_ADXL345_U.h>
#include <SD.h>
#include <USBHost_t36.h>
#include <Wire.h>
MS5611 MS5611(0x77);
Adafruit_MPU6050 mpu;
Adafruit_MMC5603 mmc = Adafruit_MMC5603(12345); //Assign a unique ID to this sensor
Adafruit_ADXL345_Unified acc = Adafruit_ADXL345_Unified();

USBHost USB_SER;
USBHub hub1(USB_SER);
USBSerial_BigBuffer USB_serial(USB_SER, 1); // Handles anything up to 512 bytes

const float seapres = 1013.25; // Don't mess with this
const int pinone = 13;
const int pintwo = 13;
const int pinbuzz = 9;
double maxalt = 0;
double height = 500;
bool executed = false;
bool timerchecker = false;
unsigned long stopwatch;

unsigned long ignitiondelay = 500;
unsigned long currenttime;
unsigned long backup;
unsigned long backupingbackup;

const float alpha = 0.2;
Ewma ewma_pres(alpha);
Ewma ewma_temp(alpha);

File file;

void setup()
{
    USB_SER.begin();

    Serial.begin(115200);
    Serial.println("System initializing...");
    Wire.begin();
    if (MS5611.begin() == true)
    {
      Serial.println("MS5611 found.");
    }
    else
    {
      Serial.println("MS5611 not found. halt.");
      while (1);
    }
    if (mpu.begin() == true)
    {
      Serial.println("MPU6050 found.");
    }
    else
    {
      Serial.println("MPU6050 not found. halt.");
      while (1);
    }
    if (mmc.begin(MMC56X3_DEFAULT_ADDRESS, &Wire) == true)
    {
      Serial.println("MMC56X3 found.");
    }
    else
    {
      Serial.println("MMC56X3 not found. halt.");
      while (1);
    }
    if (acc.begin() == true)
    {
      Serial.println("ADXL345 found.");
    }
    else
    {
      Serial.println("ADXL345 not found. halt.");
      while (1);
    }
    mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    Serial.print("Gyro range set to: +-500 deg/s\n");
    file.print("Gyro range set to: +-500 deg/s\n");
    mpu.setFilterBandwidth(MPU6050_BAND_5_HZ);
    Serial.print("Filter bandwidth set to: 5Hz\n");
    file.print("Filter bandwidth set to: 5Hz\n");

    mmc.printSensorDetails();

    if (!SD.begin(BUILTIN_SDCARD))
    {
      Serial.println("initialization failed!");
      return;
    }
    Serial.println("initialization done.");
    if(!file)
    {
      Serial.println("failure to open file");
    }

    pinMode(pinone, OUTPUT);
    pinMode(pintwo, OUTPUT);
}

void loop()
{
  file = SD.open("rocket.txt", FILE_WRITE);
  MS5611.read();
  currenttime = millis();
  double temp = MS5611.getTemperature();
  double pres = MS5611.getPressure();
  ewma_pres.filter(pres);
  ewma_temp.filter(temp);

  // Calculates altitute from smoothened temp and pres
  double alt = getAltitude(ewma_temp.output, ewma_pres.output);
  
  // Write to file and serial monitor

  Serial.print("\tTemperature: ");
  file.print("Temperature: ");
  Serial.print(temp);
  file.print(temp, 2);

  Serial.print("\tPressure: ");
  file.print("\tPressure: ");
  Serial.print(pres);
  file.print(pres, 2);

  Serial.print("\tAltitude: ");
  file.print("\tPressure: ");
  Serial.print(alt);
  file.print(alt, 2);

  Serial.println();
  file.println();
  
  // Delay thingy for parachute 1
  
  if(currenttime>6000) // Puts a delay for 6 seconds of launch
  {
    if(executed == false)
    {
      backup = currenttime;
    }
    
    // Delay thingy for parachute 2
    
    if(executed == true)
    {
      backupingbackup = currenttime;
    }
    
    // PARACHUTE 1 DEPLOYEMENT
    
    if(alt < maxalt) // Checks if altitude is decreasing
    {
      if(timerchecker == false) // Stopwatch starts
      {
        stopwatch = currenttime;
        timerchecker = true;
      }
      
      if(executed == false && (currenttime - stopwatch == 800)) // If stopwatch reaches 800 milliseconds execute deploy thing. This is to make sure that altitude is decreasing for 800 milliseconds and that it's just not a noise spike
      {
        digitalWrite(pinone, HIGH);
        if (currenttime - backup >= ignitiondelay) // This is to make sure that ignition charge is set for 500 milliseconds
        {
          digitalWrite(pinone, LOW);
          Serial.print("\nDROGUE DEPLOYED\n");
          file.print("\nDROGUE DEPLOYED\n");
          executed = true;
        }
      }
    }
    
    // Maximum altitude updater
    
    else if(alt >= maxalt)
    {
      maxalt = alt;
    }
    
    // PARACHUTE 2 DEPLOYEMENT
    
    if(alt <= height && executed == true)
    {
      digitalWrite(pintwo, HIGH);
      if (currenttime - backupingbackup >= ignitiondelay)
      {
        digitalWrite(pinone, LOW);
        Serial.print("\tMAIN PARACHUTE DEPLOYED\n");
        file.print("\tMAIN PARACHUTE DEPLOYED\n");
        executed = false;
      }
    }
  }

  //Gyro

  sensors_event_t acc, gyr, temps;
  mpu.getEvent(&acc, &gyr, &temps);

  Serial.print("Acceleration X: ");
  file.print("Acceleration X: ");
  Serial.print(acc.acceleration.x);
  file.print(acc.acceleration.x);
  Serial.print(", Y: ");
  file.print(", Y: ");
  Serial.print(acc.acceleration.y);
  file.print(acc.acceleration.y);
  Serial.print(", Z: ");
  file.print(", Z: ");
  Serial.print(acc.acceleration.z);
  file.print(acc.acceleration.z);
  Serial.println(" m/s^2");
  file.println(" m/s^2");

  Serial.print("Rotation X: ");
  file.print("Rotation X: ");
  Serial.print(gyr.gyro.x);
  file.print(gyr.gyro.x);
  Serial.print(", Y: ");
  file.print(", Y: ");
  Serial.print(gyr.gyro.y);
  file.print(gyr.gyro.y);
  Serial.print(", Z: ");
  file.print(", Z: ");
  Serial.print(gyr.gyro.z);
  file.print(gyr.gyro.z);
  Serial.println(" rad/s");
  file.println(" rad/s");

  // Magnet

  sensors_event_t event;
  mmc.getEvent(&event);

  Serial.print("X: ");
  file.print("X: ");
  Serial.print(event.magnetic.x);
  file.print(event.magnetic.x);
  Serial.print("  ");
  file.print("  ");
  Serial.print("Y: ");
  file.print("Y: ");
  Serial.print(event.magnetic.y);
  file.print(event.magnetic.y);
  Serial.print("  ");
  file.print("  ");
  Serial.print("Z: ");
  file.print("Z: ");
  Serial.print(event.magnetic.z);
  file.print(event.magnetic.z);
  Serial.print("  ");
  file.print("  ");
  Serial.println("uT");
  file.println("uT");

  //Accel

  sensors_event_t newevent;
  acc.getEvent(&newevent);

  Serial.print("X: ");
  file.print("X: "); 
  Serial.print(event.acceleration.x); 
  file.print(event.acceleration.x);
  Serial.print("  ");
  file.print("  ");
  Serial.print("Y: "); 
  file.print("Y: "); 
  Serial.print(event.acceleration.y); 
  file.print(event.acceleration.y); 
  Serial.print("  ");
  file.print("  ");
  Serial.print("Z: "); 
  file.print("Z: "); 
  Serial.print(event.acceleration.z); 
  file.print(event.acceleration.z); 
  Serial.print("  ");
  file.print("  ");
  Serial.println("m/s^2 ");
  file.println("m/s^2 ");

  // Buzzer
  
  digitalWrite(pinbuzz, HIGH);
  digitalWrite(pinbuzz, LOW);
  digitalWrite(pinbuzz, HIGH);
  
  delay(100);
}

double getAltitude(double temp, double pres) // Calculates altitude from temperature and pressure
{
  return (((pow((seapres/pres),(1 / 5.257))-1)*(temp+273.15))/0.0065);
}
